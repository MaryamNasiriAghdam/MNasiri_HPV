# Splicing analysis and isoform switches

# Load libraries
library(GenomeInfoDb)
library(DESeq2)
library(AnnotationDbi)
library(RColorBrewer)
library(ggplot2)
library(IsoformSwitchAnalyzeR)
library(BSgenome.Hsapiens.UCSC.hg38)

# Set directory
setwd("~/Analysis/Article_isoformswitchanalyzer")

# /////////////FOR ALL COMPARISONS/////////////////////////
# Import data from StringTie
stringTieQuant <- importIsoformExpression(
  parentDir = "~/Analysis/StringTie/StringTie-All",
  addIsofomIdAsColumn = FALSE, 
  readLength = 150
)

# Define groups
myDesign <- data.frame(
  sampleID = colnames(stringTieQuant$abundance),
  condition = gsub('_.*', '', colnames(stringTieQuant$abundance))
)

myDesign

switchAnalyzeRlist <- importRdata(
  isoformCountMatrix   = stringTieQuant$counts,
  isoformRepExpression = stringTieQuant$abundance,
  designMatrix         = myDesign,
  isoformExonAnnoation = "~/Analysis/StringTie/HAC_stringtie_merged.gtf",
  fixStringTieAnnotationProblem = TRUE
)

summary(switchAnalyzeRlist)

# Add annotations
BSgenome.Hsapiens.UCSC.hg38
genome <- BSgenome.Hsapiens.UCSC.hg38


switchAnalyzeRlist <- isoformSwitchAnalysisPart1(
  switchAnalyzeRlist   = switchAnalyzeRlist,
  pathToGTF = '~/Analysis/StringTie/Homo_sapiens.GRCh38.102.gtf',
  pathToOutput = '~/Analysis/Article_isoformswitchanalyzer',
  outputSequences      = TRUE,
  genomeObject = genome,
  prepareForWebServers = FALSE
)


head(switchAnalyzeRlist$isoformFeatures,2)
head(switchAnalyzeRlist$exons,2)
head(switchAnalyzeRlist$ntSequence,2)

# Filtering
switchAnalyzeRlistFiltered <- preFilter(
  switchAnalyzeRlist = switchAnalyzeRlist,
  geneExpressionCutoff = 3,
  isoformExpressionCutoff = 1,
  removeSingleIsoformGenes = TRUE
)

switchAnalyzeRlistDEXSeq <- isoformSwitchTestDEXSeq(
  switchAnalyzeRlist = switchAnalyzeRlistFiltered,
  reduceToSwitchingGenes=TRUE
)

extractSwitchSummary(switchAnalyzeRlistDEXSeq)
switchAnalyzeRlistORF <- addORFfromGTF( switchAnalyzeRlistDEXSeq, pathToGTF = '~/Analysis/StringTie/Homo_sapiens.GRCh38.102.gtf', ignoreAfterPeriod = T)
"orfAnalysis" %in% names( switchAnalyzeRlistORF )


# Extract Sequences
NovelIsoforms <- analyzeNovelIsoformORF(
  switchAnalyzeRlistORF, 
  analysisAllIsoformsWithoutORF = TRUE, 
  genomeObject = genome
)



SwitchListAnalyzed <- extractSequence(
  NovelIsoforms, 
  genomeObject = genome, 
  pathToOutput = '~/Analysis/Article_isoformswitchanalyzer',
  writeToFile = TRUE
)

# To Obtain results from external databases.....................................

SwitchListAnalyzedCPC2 <- analyzeCPC2(
  switchAnalyzeRlist   = SwitchListAnalyzed,
  pathToCPC2resultFile = 'result_cpc2.txt',
  removeNoncodinORFs   = TRUE
)


SwitchListAnalyzedSignalP <- analyzeSignalP(
  switchAnalyzeRlist       = SwitchListAnalyzedCPC2,
  pathToSignalPresultFile  = 'result_SignalP.txt'
)


SwitchListAnalyzedIUPred <- analyzeIUPred2A(
  switchAnalyzeRlist        = SwitchListAnalyzedSignalP,
  pathToIUPred2AresultFile = 'result_IUPred.result',
  showProgress = FALSE
)

SwitchListAnalyzedIUPred


#To analyze the alternative splicing events and creating the figures
SwitchListAnalyzedAS <- analyzeAlternativeSplicing(
  switchAnalyzeRlist = SwitchListAnalyzedIUPred,
  quiet=TRUE
)

consequencesOfInterest <- c('intron_retention','coding_potential','NMD_status')

SwitchListAnalyzedAS <- analyzeSwitchConsequences(
  SwitchListAnalyzedAS,
  consequencesToAnalyze = consequencesOfInterest, 
  dIFcutoff = 0.1,
  showProgress=FALSE
)


extractSplicingSummary(
  SwitchListAnalyzedAS,
  asFractionTotal = FALSE,
  plotGenes=TRUE
)


splicingEnrichment <- extractSplicingEnrichment(
  SwitchListAnalyzedAS,
  splicingToAnalyze='all',
  returnResult=TRUE,
  returnSummary=TRUE
)

extractSplicingGenomeWide(
  SwitchListAnalyzedAS,
  featureToExtract = 'all',
  splicingToAnalyze = 'all', 
  plot=TRUE,
  returnResult=FALSE
)

switchingIso <- extractTopSwitches( 
  SwitchListAnalyzedAS, 
  filterForConsequences = FALSE, 
  n = NA,
  extractGenes = FALSE,
  sortByQvals = TRUE
)


switchPlotTopSwitches(
  switchAnalyzeRlist = SwitchListAnalyzedAS, 
  n = Inf, 
  filterForConsequences = FALSE,
  fileType = "png",
  pathToOutput = "SS"
)

extractSwitchOverlap(
  SwitchListAnalyzedAS,
  filterForConsequences=TRUE,
  plotIsoforms = FALSE
)

extractConsequenceSummary(
  SwitchListAnalyzedAS,
  consequencesToAnalyze=c('domains_identified','intron_retention','coding_potential'),
  plotGenes = FALSE,     
  asFractionTotal = FALSE
)



